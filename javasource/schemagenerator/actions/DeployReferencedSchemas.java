// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package schemagenerator.actions;

import java.util.ArrayList;
import java.util.List;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.thirdparty.org.json.JSONArray;
import com.mendix.thirdparty.org.json.JSONObject;
import com.mendix.webui.CustomJavaAction;
import schemagenerator.proxies.OdataSchemaDocument;
import schemagenerator.proxies.constants.Constants;
import schemagenerator.proxies.microflows.Microflows;

public class DeployReferencedSchemas extends CustomJavaAction<java.lang.Void>
{
	private java.lang.String JsonString;

	public DeployReferencedSchemas(IContext context, java.lang.String JsonString)
	{
		super(context);
		this.JsonString = JsonString;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		List<OdataSchemaDocument> OdataSchemaDocs = Microflows.getDeployedServices(getContext());
		List<String> deployedFiles = new ArrayList<String>();
		for(OdataSchemaDocument OdataSchemaDoc: OdataSchemaDocs)
		{
			String uriValue= "http://localhost/" + OdataSchemaDoc.getName() + Constants.getAppendInFileName() + OdataSchemaDoc.getmajorVersion() + Constants.getAppendInFileName() + "TcMapping.json";
			deployedFiles.add(uriValue);
		}
		
		JSONObject inputString = new JSONObject(JsonString);
		JSONArray referencesArray = inputString.getJSONArray("externalReferences");
		for (int refIndex = 0; refIndex < referencesArray.length(); ++refIndex)
		{
			String uriString = referencesArray.getJSONObject(refIndex).getString("uri");
			if (uriString.contains(CheckAndAddVocabularySchemas.CAPABLITIES_NAME))
				continue;
			
			if(!deployedFiles.contains(uriString))
			{
				String mappingFileName = uriString.split("http://localhost/")[1];
				String[] names = mappingFileName.split(Constants.getAppendInFileName());
				
				OdataSchemaDocument odataSchemaDocument = Microflows.retriveOdataSchemaDocument(getContext(), names[0], names[1]);
 				Microflows.deployFiles(getContext(), odataSchemaDocument);
			}
		}
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DeployReferencedSchemas";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
