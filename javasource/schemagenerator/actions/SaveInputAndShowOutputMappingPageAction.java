// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package schemagenerator.actions;

import java.util.ArrayList;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.webui.CustomJavaAction;
import com.mendix.webui.FeedbackHelper;
import schemagenerator.proxies.ActionParams;
import schemagenerator.proxies.ComplexTypeAttribute;
import schemagenerator.proxies.ContractNameSpaces;
import schemagenerator.proxies.OdataComplexType;
import schemagenerator.proxies.OperationMappingFile;
import schemagenerator.proxies.SelectionTreeNode;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IFeedback;

public class SaveInputAndShowOutputMappingPageAction extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject __odataAction;
	private schemagenerator.proxies.OdataActions odataAction;

	public SaveInputAndShowOutputMappingPageAction(IContext context, IMendixObject odataAction)
	{
		super(context);
		this.__odataAction = odataAction;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.odataAction = this.__odataAction == null ? null : schemagenerator.proxies.OdataActions.initialize(getContext(), __odataAction);

		// BEGIN USER CODE
		IMendixObject opMappingFile = Core.retrieveByPath(getContext(), __odataAction, OperationMappingFile.MemberNames.OperationMappingFile_OdataActions.toString()).get(0);
		IMendixObject viewMxObj = Core.retrieveByPath(getContext(), opMappingFile, OperationMappingFile.MemberNames.OperationMappingFile_View_Request.toString()).get(0);
		List<IMendixObject> tree = Core.retrieveByPath(getContext(), viewMxObj, SelectionTreeNode.MemberNames.SelectionTreeNode_View.toString());
		List<IMendixObject> paramNodeList = new ArrayList<>();
		tree.forEach(e -> {
			if (e.<Boolean>getValue(getContext(), SelectionTreeNode.MemberNames.AddAsParameter.toString()))
				paramNodeList.add(e);
		});
		int paramCount = 0;
		for (IMendixObject paramNode : paramNodeList) {
			String paramNodeName = paramNode.<String>getValue(getContext(), SelectionTreeNode.MemberNames.Name.toString());
			String[] paramNodeNameParts = paramNodeName.split("[:]");
			ActionParams actionParameter = new ActionParams(getContext());
			actionParameter.setName("parameter" + Integer.toString(paramCount));
			actionParameter.setActionParams_OdataActions(odataAction);
			actionParameter.setIsRequired(true);
			actionParameter.setIsCollection(false);
			if (paramNodeNameParts.length >= 2) {
				actionParameter.setParameterDataType(getContext(), paramNodeNameParts[1]);
			}
			else {
				List<IMendixObject> childrenNodes = Core.retrieveByPath(getContext(), paramNode, SelectionTreeNode.MemberNames.SelectionTreeNode_View.toString());
				ContractNameSpaces cns = odataAction.getOdataActions_ContractNameSpaces();
				OdataComplexType complexType = new OdataComplexType(getContext());
				complexType.setOdataComplexType_ContractNameSpaces(cns);
				complexType.setComplexTypeName(getContext(), paramNodeName + "ComplexTypeForParameter" + Integer.toString(paramCount) + "Action" + odataAction.getName());
				for (IMendixObject childNode : childrenNodes) {
					String childName = childNode.<String>getValue(getContext(), SelectionTreeNode.MemberNames.Name.toString());
					ComplexTypeAttribute complexTypeAttribute = new ComplexTypeAttribute(getContext());
					complexTypeAttribute.setAttributeName(childName);
					complexTypeAttribute.setAttributeDataType(childName.split("[:]")[1]);
					complexTypeAttribute.setIsCollection(false);
					complexTypeAttribute.setIsRequired(false);
					complexTypeAttribute.setInherited(false);
					complexTypeAttribute.commit();
				}
				complexType.commit();
				actionParameter.setParameterDataType(getContext(), paramNodeName + "ComplexTypeForParameter" + Integer.toString(paramCount) + "Action" + odataAction.getName());
			}
			actionParameter.commit();
			paramCount++;
		}

		//FeedbackHelper.addCloseCallerFeedback(getContext());
		FeedbackHelper.addRefreshObjectFeedback(getContext(), odataAction.getMendixObject().getId());
		/*FeedbackHelper.addOpenFormFeedback(
			getContext(),
			"SchemaGenerator/ActionMappingEditPage",
			null,
			IFeedback.FormTarget.MODAL,
			odataAction.getMendixObject().getId(),
			null
		);*/

		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "SaveInputAndShowOutputMappingPageAction";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
