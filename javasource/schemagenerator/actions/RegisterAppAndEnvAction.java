// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package schemagenerator.actions;

import java.io.InputStream;
import java.net.URI;
import java.net.URLEncoder;
import com.mendix.core.Core;
import com.mendix.http.Http;
import com.mendix.http.HttpHeader;
import com.mendix.http.HttpMethod;
import com.mendix.http.HttpResponse;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IFeedback;
import com.mendix.webui.CustomJavaAction;
import com.mendix.webui.FeedbackHelper;
import org.apache.commons.io.IOUtils;
import org.apache.http.HttpStatus;
import org.apache.xmlrpc.util.HttpUtil;
import oauth.proxies.ResponceAccessToken;
import schemagenerator.proxies.constants.Constants;
import schemagenerator.proxies.microflows.Microflows;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IFeedback.MessageType;
import com.mendix.thirdparty.org.json.JSONArray;
import com.mendix.thirdparty.org.json.JSONObject;

public class RegisterAppAndEnvAction extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject __datahubAppAndEnv;
	private schemagenerator.proxies.DatahubAppAndEnv datahubAppAndEnv;

	public RegisterAppAndEnvAction(IContext context, IMendixObject datahubAppAndEnv)
	{
		super(context);
		this.__datahubAppAndEnv = datahubAppAndEnv;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.datahubAppAndEnv = this.__datahubAppAndEnv == null ? null : schemagenerator.proxies.DatahubAppAndEnv.initialize(getContext(), __datahubAppAndEnv);

		// BEGIN USER CODE
		if (datahubAppAndEnv.getActive(getContext()))
			Microflows.setFormActive(getContext(), datahubAppAndEnv);
		
		if (datahubAppAndEnv.getUseExistingEnvironment(getContext())) {
			datahubAppAndEnv.commit(getContext());
			FeedbackHelper.addCloseCallerFeedback(getContext());
			FeedbackHelper.addTextMessageFeedback(getContext(), MessageType.INFO, "New Environment Saved Succesfully", false);
			return null;
		}
		datahubAppAndEnv.setAppName(getContext(), datahubAppAndEnv.getEnvironmentName(getContext()));
		datahubAppAndEnv.setAppDescription(getContext(), String.format("App for %s Environment", datahubAppAndEnv.getEnvironmentName()));

		ResponceAccessToken accessToken = oauth.proxies.microflows.Microflows.getActiveToken(getContext());
		system.proxies.HttpResponse resp = new system.proxies.HttpResponse(getContext());
		resp.setStatusCode(getContext(), HttpStatus.SC_FORBIDDEN);
		if (accessToken == null) {
			datahubAppAndEnv.commit();
			oauth.proxies.microflows.Microflows.handleDatahubAPIErrors(getContext(), datahubAppAndEnv, resp, "/p/registerEnv");
			return null;
		}
		Http httpHandler = Core.http();
        HttpHeader authorization = new HttpHeader("Authorization", String.format("Bearer %s", accessToken.getAccessToken(getContext())));
		JSONObject appRequest = new JSONObject();
		appRequest.put("Name", datahubAppAndEnv.getAppName());
		appRequest.put("Description", datahubAppAndEnv.getAppDescription());
		appRequest.put("RepositoryLocation", datahubAppAndEnv.getAppRepositoryLocation());
		appRequest.put("Type", "Teamcenter");
		JSONObject businessOwner = new JSONObject();
		businessOwner.put("FirstName", "a");
		businessOwner.put("LastName", "a");
		businessOwner.put("Email", "a@b.com");
		JSONObject technicalOwner = new JSONObject();
		technicalOwner.put("FirstName", "a");
		technicalOwner.put("LastName", "a");
		technicalOwner.put("Email", "a@b.com");
		appRequest.put("BusinessOwner", businessOwner);
		appRequest.put("TechnicalOwner", technicalOwner);

        InputStream contentStream = IOUtils.toInputStream(appRequest.toString());
        HttpResponse responseAppCreation = httpHandler.executeHttpRequest(
            new URI(Constants.getDatahubLocation() + "/applications"),
            HttpMethod.POST,
            new HttpHeader[] {authorization},
            contentStream
		);
		if (responseAppCreation.getStatusCode() > 299 || responseAppCreation.getStatusCode() < 200) {
			resp.setStatusCode(getContext(), responseAppCreation.getStatusCode());
			resp.setContent(getContext(), IOUtils.toString(responseAppCreation.getContent()));
			datahubAppAndEnv.commit();
			oauth.proxies.microflows.Microflows.handleDatahubAPIErrors(getContext(), datahubAppAndEnv, resp, "/p/registerEnv");
			return null;
		}
        JSONObject responseAppJSON = new JSONObject(IOUtils.toString(responseAppCreation.getContent()));
		JSONObject envRequest = new JSONObject();
		envRequest.put("Name", datahubAppAndEnv.getEnvironmentName(getContext()));
		envRequest.put("Location", datahubAppAndEnv.getEnvironmentLocation(getContext()));
		envRequest.put("Type", datahubAppAndEnv.getEnvironmentType(getContext()).getCaption().toString());		envRequest.put("CustomLocation", new JSONArray());

		String appUUID =  responseAppJSON.getString("UUID");
		InputStream contentStreamEnvCreation = IOUtils.toInputStream(envRequest.toString());
        HttpResponse responseEnvCreation = httpHandler.executeHttpRequest(
            new URI(Constants.getDatahubLocation() + "/applications/" + responseAppJSON.getString("UUID") + "/environments"),
            HttpMethod.POST,
            new HttpHeader[] {authorization},
            contentStreamEnvCreation
		);

		if (responseEnvCreation.getStatusCode() > 299 || responseEnvCreation.getStatusCode() < 200) {
			resp.setStatusCode(getContext(), responseEnvCreation.getStatusCode());
			resp.setContent(getContext(), IOUtils.toString(responseEnvCreation.getContent()));
			datahubAppAndEnv.commit();
			oauth.proxies.microflows.Microflows.handleDatahubAPIErrors(getContext(), datahubAppAndEnv, resp, "/p/registerEnv");
			return null;
		}
		
		datahubAppAndEnv.setAppUUID(getContext(), appUUID);
		JSONObject responseEnvJSON = new JSONObject(IOUtils.toString(responseEnvCreation.getContent()));
		datahubAppAndEnv.setEnvironmentUUID(getContext(), responseEnvJSON.getString("UUID"));
		FeedbackHelper.addCloseCallerFeedback(getContext());
		FeedbackHelper.addOpenFormFeedback(
			getContext(),
			"SchemaGenerator/HomePage",
			IFeedback.FormTarget.CONTENT,
			null,
			null
		);
		FeedbackHelper.addOpenFormFeedback(
			getContext(),
			"SchemaGenerator/DatahubConfigPage",
			IFeedback.FormTarget.CONTENT,
			null,
			null
		);
		FeedbackHelper.addTextMessageFeedback(getContext(), MessageType.INFO, "Environment " + responseEnvJSON.getString("Name") + " Registered Succesfully", false);
		datahubAppAndEnv.commit(getContext());
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "RegisterAppAndEnvAction";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
