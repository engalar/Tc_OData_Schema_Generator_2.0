// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package schemagenerator.actions;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.webui.CustomJavaAction;
import schemagenerator.proxies.ContractNameSpaces;
import schemagenerator.proxies.ODataSchema;
import schemagenerator.proxies.OdataComplexType;
import schemagenerator.proxies.OdataObject;
import schemagenerator.proxies.OdataSchemaDocument;
import schemagenerator.proxies.SelectionTreeNode;
import schemagenerator.proxies.View;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class TreeChildAction extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private IMendixObject __parent;
	private schemagenerator.proxies.SelectionTreeNode parent;

	public TreeChildAction(IContext context, IMendixObject parent)
	{
		super(context);
		this.__parent = parent;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.parent = this.__parent == null ? null : schemagenerator.proxies.SelectionTreeNode.initialize(getContext(), __parent);

		// BEGIN USER CODE
		List<IMendixObject> children = new ArrayList<>();
		IMendixIdentifier realParentId = Core.createMendixIdentifier(parent.getMendixGUID());
		IMendixObject realParentMxObj = Core.retrieveId(getContext(), realParentId);
		if (realParentId.getObjectType().equals(ODataSchema.entityName)) {
			IMendixObject viewMxObj = Core.retrieveByPath(getContext(), __parent, SelectionTreeNode.MemberNames.SelectionTreeNode_View.toString()).get(0);
			View view = View.initialize(getContext(), viewMxObj);
			String searchString = view.getSearch();
			List<IMendixObject> contractNameSpacesList = Core.retrieveByPath(getContext(), realParentMxObj, ContractNameSpaces.MemberNames.ContractNameSpaces_ODataSchema.toString());
			for (IMendixObject contractNameSpace : contractNameSpacesList) {
				String contractName = contractNameSpace.getMember(getContext(), ContractNameSpaces.MemberNames.ContractNameSpace.toString()).getValue(getContext()).toString();
				SelectionTreeNode newNode = new SelectionTreeNode(getContext());
//				newNode.setHasAttr(getContext(), true);
				newNode.setName(getContext(), contractName);
				newNode.setMendixGUID(getContext(), contractNameSpace.getId().toLong());
//				newNode.setparent_child(getContext(), parent);
				children.add(newNode.getMendixObject());
			}
		}
		else if (realParentId.getObjectType().equals(ContractNameSpaces.entityName)) {
//			IMendixObject odataschemanodeMxObj = Core.retrieveByPath(getContext(), __parent, SelectionTreeNode.MemberNames.parent_child.toString()).get(0);
//			IMendixObject viewMxObj = Core.retrieveByPath(getContext(), odataschemanodeMxObj, SelectionTreeNode.MemberNames.SelectionTreeNode_View.toString()).get(0);
//			View view = View.initialize(getContext(), viewMxObj);
//			String searchString = view.getSearch();
//			searchString = searchString == null ? "" : searchString;
			IMendixObject odataSchema = Core.retrieveByPath(getContext(), realParentMxObj, ContractNameSpaces.MemberNames.ContractNameSpaces_ODataSchema.toString()).get(0);
			List<IMendixObject> allComplexTypes = TcODataSchemaHelper.getAllComplexTypes(getContext(), Arrays.asList(odataSchema));
			for (IMendixObject complexType : allComplexTypes) {
				String complexTypeName = complexType.getMember(getContext(), OdataComplexType.MemberNames.ComplexTypeName.toString()).getValue(getContext()).toString();
//				if (!complexTypeName.contains(searchString)) {
//					continue;
//				}
				SelectionTreeNode newNode = new SelectionTreeNode(getContext());
//				newNode.setHasAttr(getContext(), false);
				newNode.setName(getContext(), complexTypeName);
				newNode.setMendixGUID(getContext(), complexType.getId().toLong());
//				newNode.setparent_child(getContext(), parent);
//				newNode.setSelectionTreeNode_View(getContext(), view);
				children.add(newNode.getMendixObject());
			}
			List<IMendixObject> allOdataEntities = TcODataSchemaHelper.getAllOdataObjects(getContext(), Arrays.asList(odataSchema));
			for (IMendixObject odataEntities : allOdataEntities) {
				String odataEntityName = odataEntities.getMember(getContext(), OdataObject.MemberNames.ODataName.toString()).getValue(getContext()).toString();
//				if (!odataEntityName.contains(searchString)) {
//					continue;
//				}
				SelectionTreeNode newNode = new SelectionTreeNode(getContext());
//				newNode.setHasAttr(getContext(), false);
				newNode.setName(getContext(), odataEntityName.split("[.]")[1]);
				newNode.setMendixGUID(getContext(), odataEntities.getId().toLong());
//				newNode.setparent_child(getContext(), parent);
				children.add(newNode.getMendixObject());
			}
		}
		return children;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "TreeChildAction";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
