// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package schemagenerator.actions;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.webui.CustomJavaAction;
import schemagenerator.proxies.ContractNameSpaces;
import schemagenerator.proxies.OData_Properties;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class ValidateService extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject __OdataSchema;
	private schemagenerator.proxies.ODataSchema OdataSchema;

	public ValidateService(IContext context, IMendixObject OdataSchema)
	{
		super(context);
		this.__OdataSchema = OdataSchema;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.OdataSchema = this.__OdataSchema == null ? null : schemagenerator.proxies.ODataSchema.initialize(getContext(), __OdataSchema);

		// BEGIN USER CODE
		try 
		{
			NamingRules namingRulesService = new NamingRules(getContext(), OdataSchema.getContractName());
			namingRulesService.executeAction();
			
			List<IMendixObject> contractNSList = Core.retrieveByPath(getContext(), __OdataSchema, "SchemaGenerator.ContractNameSpaces_ODataSchema");
			boolean throwErr = true;
			
			List<String> objNames = new ArrayList<>();
			Map<String, String> propertyValueMap = new HashMap<>();
			for(IMendixObject contractNS : contractNSList)
			{
				String contractNSName = contractNS.getMember(getContext(), "ContractNameSpace").getValue(getContext()).toString();
				if(!contractNS.<Boolean>getValue(getContext(), ContractNameSpaces.MemberNames.InheritedObject.toString()))
				{
					NamingRules namingRules = new NamingRules(getContext(), contractNSName);
					namingRules.executeAction();
					throwErr = false;
				}
				
				NamingRules namingRules = new NamingRules(getContext(), contractNSName);
				namingRules.executeAction();
				
				IMendixIdentifier identifier = (IMendixIdentifier) contractNS.getMember(getContext(), "SchemaGenerator.ContractNameSpaces_ODataSchema").getValue(getContext());
				IMendixObject OdataSchema = Core.retrieveId(getContext(), identifier);
				if(OdataSchema == null)
					throw new Exception("Please add at least one Odata object.");
				
				List<IMendixObject> contractNSListTemp = Core.retrieveByPath(getContext(), __OdataSchema, "SchemaGenerator.ContractNameSpaces_ODataSchema");
				
				for(IMendixObject contractNSTemp : contractNSListTemp)
				{
					if(contractNSTemp.getId().equals(contractNS.getId()))
						continue;
					
					String Name = contractNSTemp.getMember(getContext(), "ContractNameSpace").getValue(getContext()).toString();
					if(contractNSName.equals(Name))
						throw new Exception( "Duplicate namespace " + contractNSName + " exists in the service.");
				}
				
				List<IMendixObject> objList = Core.retrieveByPath(getContext(), contractNS, "SchemaGenerator.OdataObject_ContractNameSpaces");
				if(objList == null || objList.isEmpty())
					throw new Exception("Please add at least one Odata object.");
								
				for(IMendixObject odataObj : objList)
				{
					String entityNameNS = odataObj.getMember(getContext(), "ODataName").getValue(getContext()).toString();
					String entityName = entityNameNS.split("[.]")[1];

					List<IMendixObject> odataObjListTemp = new ArrayList<>(objList);
					odataObjListTemp.remove(odataObj);
					for(IMendixObject odataObjTemp : odataObjListTemp)
					{
						String entityNameNSTemp = odataObjTemp.getMember(getContext(), "ODataName").getValue(getContext()).toString();
						String entityNameTemp = entityNameNSTemp.split("[.]")[1];
						if(entityName.toLowerCase().equals(entityNameTemp.toLowerCase()))
							throw new Exception("Same Odata Name for the objects " + entityNameNS + " and "  + entityNameNSTemp + ".\r\n" + "Please give a unique Odata Name.");
					}
					NamingRules namingRules_entityName = new NamingRules(getContext(), entityName);
					namingRules_entityName.executeAction();
					objNames.add(entityNameNS);
					
					List<IMendixObject> propList = Core.retrieveByPath(getContext(), odataObj, "SchemaGenerator.Properties_OdataObject");
					List<String> propNames = new ArrayList<>();
					for(IMendixObject prop : propList)
					{
						String propName = prop.getMember(getContext(), "ODataName").getValue(getContext()).toString();
						if(propNames.contains(propName.toLowerCase()))
							throw new Exception("Duplicate property name " + propName + " for the Object " + entityNameNS);
						
						propNames.add(propName.toLowerCase());
						NamingRules validName = new NamingRules(getContext(), propName);
						validName.executeAction();
						
						if(prop.getMember(getContext(), "ODataTypeValue").getValue(getContext()).equals(OData_Properties.Reference.name()) 
								|| prop.getMember(getContext(), "ODataTypeValue").getValue(getContext()).equals(OData_Properties.Relation.name()))
						{
							Object referenceValue = prop.getMember(getContext(), "referenceType").getValue(getContext());
							if(referenceValue == null)
								throw new Exception("Please select valid reference object for property " + propName);
							propertyValueMap.put(prop.getMember(getContext(), "TcName").getValue(getContext()).toString(), referenceValue.toString());
						}
					}
				}
			}
			
			if(throwErr)
				throw new Exception("Please add at lease one new namespace in the service.");
			
			Set<String> keys = propertyValueMap.keySet();
			for(String propertyName: keys)
			{
				String referenceValue = propertyValueMap.get(propertyName);
				if(referenceValue == null || referenceValue.isEmpty() || !objNames.contains(referenceValue)) {
					throw new Exception("Please select valid reference object for property " + propertyName);
				}
			}
			
			
			return null;
		} catch (Exception e) {
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ValidateService";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
