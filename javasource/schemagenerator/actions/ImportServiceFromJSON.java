// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package schemagenerator.actions;

import com.mendix.core.Core;
import com.mendix.integration.ActionWhenNoObjectFound;
import com.mendix.integration.ShouldCommit;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.thirdparty.org.json.JSONArray;
import com.mendix.thirdparty.org.json.JSONObject;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import schemagenerator.proxies.*;
import org.apache.commons.io.IOUtils;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class ImportServiceFromJSON extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __odataSchemaDocument;
	private schemagenerator.proxies.OdataSchemaDocument odataSchemaDocument;
	private java.lang.String odataSchemaJson;
	private schemagenerator.proxies.ShouldCommit shouldCommit;

	public ImportServiceFromJSON(IContext context, IMendixObject odataSchemaDocument, java.lang.String odataSchemaJson, java.lang.String shouldCommit)
	{
		super(context);
		this.__odataSchemaDocument = odataSchemaDocument;
		this.odataSchemaJson = odataSchemaJson;
		this.shouldCommit = shouldCommit == null ? null : schemagenerator.proxies.ShouldCommit.valueOf(shouldCommit);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.odataSchemaDocument = this.__odataSchemaDocument == null ? null : schemagenerator.proxies.OdataSchemaDocument.initialize(getContext(), __odataSchemaDocument);

		// BEGIN USER CODE

		// Input Validations
		if (odataSchemaDocument == null && (odataSchemaJson == null || odataSchemaJson.isBlank())) {
			throw new IllegalArgumentException("Need one of the parameters to be not null");
		}

		// Convert Both to String
		String schemaJsonString = null;
		if (odataSchemaJson != null) {
			schemaJsonString = odataSchemaJson;
		}
		else if (odataSchemaDocument != null) {
			schemaJsonString = IOUtils.toString(Core.getFileDocumentContent(getContext(), __odataSchemaDocument));
		}
		JSONObject schemaJson = new JSONObject(schemaJsonString);

		// Check if we Need to commit
		com.mendix.integration.ShouldCommit shouldCommitAfterImport = null;
		if(shouldCommit.getCaption().equals(schemagenerator.proxies.ShouldCommit.Yes.getCaption())) {
			shouldCommitAfterImport = ShouldCommit.YES;
		}
		else if (shouldCommit.getCaption().equals(schemagenerator.proxies.ShouldCommit.YesWithoutEvents.getCaption())) {
			shouldCommitAfterImport = ShouldCommit.YESWITHOUTEVENTS;
		}
		else if (shouldCommit.getCaption().equals(schemagenerator.proxies.ShouldCommit.No.getCaption())) {
			shouldCommitAfterImport = ShouldCommit.NO;
		}

		// Import Schema using Mendix's Import Mapping Functionality
		IMendixObject odataSchemaMxObj = Core.integration().importStream(
				getContext(),
				IOUtils.toInputStream(schemaJsonString),
				"SchemaGenerator.OdataSchemaImportMapping",
				ActionWhenNoObjectFound.CREATE,
				null,
				-1,
				shouldCommitAfterImport,
				false
		).get(0);
		ODataSchema odataSchema = ODataSchema.initialize(getContext(), odataSchemaMxObj);

		ArrayList<IMendixObject> toCommit = new ArrayList<>();
		List<IMendixObject> cnsList = Core.retrieveByPath(
				getContext(),
				odataSchemaMxObj,
				ContractNameSpaces.MemberNames.ContractNameSpaces_ODataSchema.toString()
		);

		JSONArray dataServicesJson = schemaJson.getJSONArray("dataServices");
		for (IMendixObject contractNamespace : cnsList)
		{
			List<OdataComplexType> allComplexTypes = Core.retrieveByPath(
				getContext(),
				contractNamespace,
				OdataComplexType.MemberNames.OdataComplexType_ContractNameSpaces.toString()
			).stream().map(e -> OdataComplexType.initialize(getContext(), e)).collect(Collectors.toList());

			// Find the Mendix ContractNameSpace entity matching the JSON object
			JSONObject jsonCns = null;
			for (int i = 0; i < dataServicesJson.length(); i++) {
				if (dataServicesJson.getJSONObject(i).getString("schemaNameSpace").equals(contractNamespace.<String>getValue(getContext(), ContractNameSpaces.MemberNames.ContractNameSpace.toString()))) {
					jsonCns = dataServicesJson.getJSONObject(i);
					break;
				}
			}
			if (jsonCns == null) {
				throw new Exception("Contract namespace not found");
			}

			// Find the Unbound Actions corresponding to the Action in JSON
			List<OdataActions> unboundActions = Core.retrieveByPath(
					getContext(),
					contractNamespace,
					OdataActions.MemberNames.OdataActions_ContractNameSpaces.toString()
			).stream().map(e -> OdataActions.initialize(getContext(), e)).collect(Collectors.toList());

			JSONArray actionJSONArray = jsonCns.optJSONArray("actionInfo");
			if(actionJSONArray!= null)
				importActions(toCommit, allComplexTypes, unboundActions, jsonCns.getJSONArray("actionInfo"));

			// Find the OData Entities corresponding to the OData Entities in JSON
			List<IMendixObject> odataObjects = Core.retrieveByPath(
					getContext(),
					contractNamespace,
					OdataObject.MemberNames.OdataObject_ContractNameSpaces.toString()
			);
			for (IMendixObject odataObject : odataObjects) {

				JSONArray entityInfo = jsonCns.getJSONArray("entityInfo");
				JSONObject odataObjectJSON = null;
				for (int i = 0; i < entityInfo.length(); i++) {
					if (entityInfo.getJSONObject(i).getString("oDataEntityName").equals(odataObject.getValue(getContext(), OdataObject.MemberNames.ODataName.toString()).toString())) {
						odataObjectJSON = entityInfo.getJSONObject(i);
						break;
					}
				}
				if (odataObjectJSON == null) {
					throw new Exception("OData Object Not Found");
				}

				// Find the Bound Actions corresponding to the Action in JSON
				List<OdataActions> boundActions = Core.retrieveByPath(
						getContext(),
						odataObject,
						OdataActions.MemberNames.OdataActions_OdataObject.toString()
				).stream().map(e -> OdataActions.initialize(getContext(), e)).collect(Collectors.toList());

				JSONArray actionArray = odataObjectJSON.optJSONArray("actionInfo");
				if(actionArray!= null)
					importActions(toCommit, allComplexTypes, boundActions, odataObjectJSON.getJSONArray("actionInfo"));
			}
		}

		// Commit all the Operation mapping files
		Core.commit(getContext(), toCommit);

		return odataSchema.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ImportServiceFromJSON";
	}

	// BEGIN EXTRA CODE
	private void importActions(ArrayList<IMendixObject> toCommit, List<OdataComplexType> allComplexTypes, List<OdataActions> actions, JSONArray boundActionInfoArray) {
		for (OdataActions action : actions) {
			for (int i = 0; i < boundActionInfoArray.length(); i++) {
				JSONObject boundActionInfoJson = boundActionInfoArray.getJSONObject(i);
				if (boundActionInfoJson.getString("name").equals(action.getName())) {
					OperationMappingFile operationMappingFile = new OperationMappingFile(getContext());
					operationMappingFile.setJSONModified(boundActionInfoJson.getJSONObject("operationMapping").toString());
					operationMappingFile.setOperationName(boundActionInfoJson.getJSONObject("operationMapping").getString("ServiceOperation"));
					operationMappingFile.setOperationMappingFile_OdataActions(action);
					toCommit.add(operationMappingFile.getMendixObject());
					break;
				}
			}

			// Associate the ComplexType to the appropriate Action Parameter
			Core.retrieveByPath(
					getContext(),
					action.getMendixObject(),
					ActionParams.MemberNames.ActionParams_OdataActions.toString()
			)
					.stream()
					.map(actionParamMxObj -> ActionParams.initialize(getContext(), actionParamMxObj))
					.forEach(
							actionParams -> {
								actionParams.setDisplayName(actionParams.getName());
								toCommit.add(actionParams.getMendixObject());
								String baseType = actionParams.getParameterDataType();
								allComplexTypes.forEach(complexType -> {
									if (complexType.getComplexTypeName().equals(baseType)) {
										complexType.setOdataComplexType_ActionParams(actionParams);
										toCommit.add(complexType.getMendixObject());
									}
								});
							});

			// Return Types
			List<IMendixObject> returnTypeMxObjs = Core.retrieveByPath(
					getContext(),
					action.getMendixObject(),
					ReturnType.MemberNames.ReturnType_OdataActions.toString()
			);
			if(returnTypeMxObjs.isEmpty()) {
				ReturnType returnType = new ReturnType(getContext());
				returnType.setBaseType("Void");
				//returnType.setReturnType_OdataActions(getContext(), action);
				returnType.setReturnType_OdataActions(null);
				toCommit.add(returnType.getMendixObject());
			}
			else {
				ReturnType returnType = ReturnType.initialize(getContext(), returnTypeMxObjs.get(0));
				String baseType = returnType.getBaseType();
				allComplexTypes.forEach(complexType -> {
					if (complexType.getComplexTypeName().equals(baseType)) {
						complexType.setOdataComplexType_ReturnType(returnType);
						toCommit.add(complexType.getMendixObject());
					}
				});
			}
		}
	}

	// END EXTRA CODE
}
