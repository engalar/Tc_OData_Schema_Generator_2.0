// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package schemagenerator.actions;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import org.apache.commons.io.IOUtils;
import org.hamcrest.core.IsInstanceOf;
import schemagenerator.proxies.OdataActions;
import schemagenerator.proxies.OperationMappingFile;
import schemagenerator.proxies.SelectionTreeNode;
import schemagenerator.proxies.View;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.thirdparty.org.json.JSONArray;
import com.mendix.thirdparty.org.json.JSONObject;

public class GenerateJsonTree extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private IMendixObject __odataActions;
	private schemagenerator.proxies.OdataActions odataActions;

	public GenerateJsonTree(IContext context, IMendixObject odataActions)
	{
		super(context);
		this.__odataActions = odataActions;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.odataActions = this.__odataActions == null ? null : schemagenerator.proxies.OdataActions.initialize(getContext(), __odataActions);

		// BEGIN USER CODE
		List<IMendixObject> opMappingFileMxObjList = null ;//(new GetOperationMappingFileAction(getContext(), __odataActions)).executeAction();

		ArrayList<IMendixObject> mappingFiles = new ArrayList<>();
		// List<IMendixObject> opMappingFileMxObjList = Core.retrieveByPath(getContext(), __odataActions, OdataActions.MemberNames.OperationMappingFile_OdataActions.toString());
		for (IMendixObject opMappingFileMxObj : opMappingFileMxObjList) {
			JSONObject mappingJson = new JSONObject(IOUtils.toString(Core.getFileDocumentContent(getContext(), opMappingFileMxObj)));
			JSONObject input = mappingJson.getJSONObject("OperationInput").getJSONArray("input").getJSONObject(0);
			ArrayList<IMendixObject> tree = new ArrayList<>();
			View view = new View(getContext());
			Iterator<String> keys = input.keys();
			while (keys.hasNext()) {
				String key = keys.next();
				Object jsonObj = input.get(key);
				SelectionTreeNode jsonNode = new SelectionTreeNode(getContext());
				if (jsonObj instanceof JSONObject) {
					jsonNode.setName(getContext(), key);
					Iterator<String> keys2 =  ((JSONObject)jsonObj).keys();
					ArrayList<SelectionTreeNode> children = new ArrayList<>();
					while (keys2.hasNext()) {
						String key2 = keys2.next();
						String jsonObj2 = (String)((JSONObject)jsonObj).get(key2);
						SelectionTreeNode jsonNode2 = new SelectionTreeNode(getContext());
						jsonNode2.setName(getContext(), key2 + ": " + jsonObj2);
						children.add(jsonNode2);
						tree.add(jsonNode2.getMendixObject());
					}
					jsonNode.setSelectionTreeNode_Children(getContext(), children);
				}
				else if (jsonObj instanceof JSONArray) {
					jsonNode.setName(getContext(), key);
					Iterator<String> keys2 =  ((JSONArray)jsonObj).getJSONObject(0).keys();
					ArrayList<SelectionTreeNode> children = new ArrayList<>();
					while (keys2.hasNext()) {
						String key2 = keys2.next();
						String jsonObj2 = (String)((JSONArray)jsonObj).getJSONObject(0).get(key2);
						SelectionTreeNode jsonNode2 = new SelectionTreeNode(getContext());
						jsonNode2.setName(getContext(), key2 + ": " + jsonObj2);
						children.add(jsonNode2);
						tree.add(jsonNode2.getMendixObject());
					}
					jsonNode.setSelectionTreeNode_Children(getContext(), children);
				}
				else {
					jsonNode.setName(getContext(), key + ": " + jsonObj);
				}
				jsonNode.setRoot(true);
				jsonNode.setSelectionTreeNode_View(view);
				tree.add(jsonNode.getMendixObject());
			}
			OperationMappingFile opMapFile = OperationMappingFile.initialize(getContext(), opMappingFileMxObj);
			Core.commit(getContext(), tree);
			opMapFile.setOperationMappingFile_View_Request(view);
			Core.commit(getContext(), opMappingFileMxObj);
			mappingFiles.add(opMappingFileMxObj);
			view.commit();
		}
		odataActions.commit();
		return mappingFiles;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GenerateJsonTree";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
