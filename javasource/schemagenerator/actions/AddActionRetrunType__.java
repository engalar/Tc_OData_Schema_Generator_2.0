// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package schemagenerator.actions;

import java.util.List;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.webui.FeedbackHelper;
import schemagenerator.proxies.ActionParams;
import schemagenerator.proxies.ComplexTypeAttribute;
import schemagenerator.proxies.ContractNameSpaces;
import schemagenerator.proxies.OdataActions;
import schemagenerator.proxies.OdataComplexType;
import schemagenerator.proxies.OperationMappingFile;
import schemagenerator.proxies.ReturnType;
import schemagenerator.proxies.SelectionTreeNode;
import schemagenerator.proxies.SelectionTreeNodeHelper;
import schemagenerator.proxies.View;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IFeedback;

public class AddActionRetrunType__ extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject __selectionHelper;
	private schemagenerator.proxies.SelectionTreeNodeHelper selectionHelper;

	public AddActionRetrunType__(IContext context, IMendixObject selectionHelper)
	{
		super(context);
		this.__selectionHelper = selectionHelper;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.selectionHelper = this.__selectionHelper == null ? null : schemagenerator.proxies.SelectionTreeNodeHelper.initialize(getContext(), __selectionHelper);

		// BEGIN USER CODE
		View view = selectionHelper.getSelectionTreeNodeHelper_View();
        IMendixObject opMappingFile = Core.retrieveByPath(getContext(), view.getMendixObject(),
                OperationMappingFile.MemberNames.OperationMappingFile_View_Response.toString()).get(0);
        IMendixObject odataActionMxObj = Core.retrieveByPath(getContext(), opMappingFile,
                OperationMappingFile.MemberNames.OperationMappingFile_OdataActions.toString()).get(0);
        OdataActions odataAction = OdataActions.initialize(getContext(), odataActionMxObj);
        SelectionTreeNode node = selectionHelper.getSelectionTreeNodeHelper_SelectionTreeNode().get(0);
 
        String paramNodeName = node.getName();
        boolean paramIsArray = false;
        if (paramNodeName.endsWith("[]")) {
            paramNodeName = paramNodeName.substring(0, paramNodeName.length() - "[]".length());
            paramIsArray = true;
        }
        
        if(!paramIsArray)
        {
        	List<IMendixObject> parents = Core.retrieveByPath(getContext(), node.getMendixObject(), SelectionTreeNode.MemberNames.SelectionTreeNode_Children.toString(), true);
        	while(!parents.isEmpty())
        	{
        		String parentNodeName = parents.get(0).getValue(getContext(), SelectionTreeNode.MemberNames.Name.toString());
                if (parentNodeName.endsWith("[]")) 
                {
                	paramIsArray = true;
                	break;
                }
                parents = Core.retrieveByPath(getContext(), parents.get(0), SelectionTreeNode.MemberNames.SelectionTreeNode_Children.toString(), true);
            }	
        }
        
        String[] paramNodeNameParts = paramNodeName.split("[:]");
		ReturnType returnType = new ReturnType(getContext());
		odataAction.setReturnType_OdataActions(returnType);
		returnType.setIsRequired(true);
		returnType.setIsCollection(paramIsArray);
        node.setMendixGUID(returnType.getMendixObject().getId().toLong());
        node.setAddAsParameter(true);
        node.commit();
        if (paramNodeNameParts.length >= 2) {
            if (paramNodeNameParts[1].trim().equals("IModelObject")) {
                returnType.setBaseType(getContext(), "Select Type");
                returnType.setOriginalBaseType(getContext(), "Reference");
                
            } else {
            	String dataType = paramNodeNameParts[1].trim();
                returnType.setBaseType(getContext(), "Edm." + getDataType(dataType));
                returnType.setOriginalBaseType(getContext(), "Edm." + dataType);
            }
           
        }
        else {
            ContractNameSpaces cns = odataAction.getOdataActions_ContractNameSpaces();
            OdataComplexType complexType = TcODataSchemaHelper.mapChildren(getContext(), node, cns, returnType);
            returnType.setBaseType(getContext(), complexType.getComplexTypeName());
        }
        returnType.setName(getContext(),paramNodeNameParts[0]);
        returnType.setReturnType_SelectionTreeNode(node);
        returnType.commit();
        FeedbackHelper.addRefreshObjectFeedback(getContext(), odataAction.getMendixObject().getId());
		FeedbackHelper.addRefreshClass(getContext(), OdataActions.getType());
		FeedbackHelper.addCloseCallerFeedback(getContext());
        return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "AddActionRetrunType__";
	}

	// BEGIN EXTRA CODE
	private String getDataType(String dataType)
    {
    	switch (dataType) {
		case "int":
			return "Int64";
		case "bool":
			return "Boolean";
		case "double":
			return "Double";
		case "float":
			return "Double";
		case "Date" :
			return "Date";
		default:
			return "String";
		}
    }
	// END EXTRA CODE
}
