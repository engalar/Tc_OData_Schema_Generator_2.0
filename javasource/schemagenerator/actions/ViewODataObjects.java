// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package schemagenerator.actions;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import schemagenerator.proxies.OData_Properties;
import schemagenerator.proxies.OdataObject;
import schemagenerator.proxies.Properties;
import schemagenerator.proxies.SubType;
import schemagenerator.proxies.types;
import schemagenerator.proxies.microflows.Microflows;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class ViewODataObjects extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private IMendixObject __CNDropDown;
	private schemagenerator.proxies.ContractNameSpaceDropDown CNDropDown;
	private IMendixObject __ODataSchema;
	private schemagenerator.proxies.ODataSchema ODataSchema;

	public ViewODataObjects(IContext context, IMendixObject CNDropDown, IMendixObject ODataSchema)
	{
		super(context);
		this.__CNDropDown = CNDropDown;
		this.__ODataSchema = ODataSchema;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.CNDropDown = this.__CNDropDown == null ? null : schemagenerator.proxies.ContractNameSpaceDropDown.initialize(getContext(), __CNDropDown);

		this.ODataSchema = this.__ODataSchema == null ? null : schemagenerator.proxies.ODataSchema.initialize(getContext(), __ODataSchema);

		// BEGIN USER CODE
		contractNSList = Core.retrieveByPath(getContext(), __ODataSchema, "SchemaGenerator.ContractNameSpaces_ODataSchema");
		IMendixObject selectedContratcNS = null;
		for(IMendixObject contractNS : contractNSList)
		{
			if(contractNS.getValue(getContext(), "ContractNameSpace").equals(__CNDropDown.getValue(getContext(), "ContractNameSpace")))
			{
				selectedContratcNS = contractNS;
				break;
			}
		}
		
		if(selectedContratcNS == null)
			return new ArrayList<IMendixObject>();
		
		CNDropDown.setInheritedObject((boolean)selectedContratcNS.getMember(getContext(), "InheritedObject").getValue(getContext()));
		List<IMendixObject> objList = Core.retrieveByPath(getContext(), selectedContratcNS, "SchemaGenerator.OdataObject_ContractNameSpaces");
		
		Map<String, String> entityBaseMap = new HashMap<String, String>();
		Map<String, IMendixObject> entityObjectMap = new HashMap<String, IMendixObject>();
		
		for(IMendixObject obj: objList)
			processObject(obj, entityBaseMap, entityObjectMap);
		
		Set<String> keys = entityBaseMap.keySet();
		for(String key: keys)
		{
			if(!allprocessedObjectNames.contains(entityBaseMap.get(key)))
				processInheritedProperties(entityBaseMap.get(key), selectedContratcNS, entityObjectMap.get(key));
		}
		
		if(!getSubTypeList.isEmpty())
			processObjectValuesFromSoa();
		
		ImanSubType.delete();
		return objList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ViewODataObjects";
	}

	// BEGIN EXTRA CODE
	private List<String> allprocessedObjectNames = new ArrayList<String>();
	private List<IMendixObject> allprocessedObjects = new ArrayList<IMendixObject>();
	private List<SubType> getSubTypeList = new ArrayList<SubType>();
	private List<IMendixObject> getObjList = new ArrayList<IMendixObject>();
	private SubType ImanSubType = new SubType(getContext());
	private List<IMendixObject> contractNSList = new ArrayList<IMendixObject>();
	
 	private OData_Properties getODataType(IContext context, IMendixObject prop_Base) {
		String type = prop_Base.getValue(context, "ODataTypeValue");
		
		if(type.equals(OData_Properties.String.getCaption().toString()))
		{
			return OData_Properties.String;
		}
		else if(type.equals(OData_Properties.Reference.getCaption().toString()))
		{
			return OData_Properties.Reference;
		}
		else if(type.equals(OData_Properties.Date.getCaption().toString()))
		{
			return OData_Properties.Date;
		}
		else if(type.equals(OData_Properties.Decimal.getCaption().toString()))
		{
			return OData_Properties.Decimal	;
		}
		else if(type.equals(OData_Properties.Integer.getCaption().toString()))
		{
			return OData_Properties.Integer;
		}
		else if(type.equals(OData_Properties._Boolean.getCaption().toString()))
		{
			return OData_Properties._Boolean;
		}
		else
		{
			return OData_Properties.Relation;
		}
	}
	
	private void processInheritedProperties(String baseType, IMendixObject contractNSToProcess, IMendixObject obj) throws Exception
	{
		String baseTypeContractName = baseType.split("[.]")[0];
		IMendixObject contract = contractNSToProcess;
		
		if(!contractNSToProcess.getValue(getContext(), "ContractNameSpace").equals(baseTypeContractName))
		{
			for(IMendixObject contractNS : contractNSList)
			{
				if(contractNS.getValue(getContext(), "ContractNameSpace").equals(baseTypeContractName))
				{
					contract = contractNS;
					break;
				}
			}
		}
		
		List<IMendixObject> objListBase = Core.retrieveByPath(getContext(), contract, "SchemaGenerator.OdataObject_ContractNameSpaces");
		for(IMendixObject obj_Base: objListBase)
		{
			if(obj_Base.getValue(getContext(), "ODataName").equals(baseType))
			{
				processBaseObject(obj_Base, baseType, contract);
				List<IMendixObject> propListBase = Core.retrieveByPath(getContext(), obj_Base, "SchemaGenerator.Properties_OdataObject");
				for(IMendixObject prop_Base: propListBase)
				{
					if(prop_Base.getValue(getContext(), "TcName").equals("puid"))
						continue;
					Properties propNew = new Properties(getContext());
					propNew.setTcName(prop_Base.getValue(getContext(), "TcName"));
					propNew.setTcDisplayName(prop_Base.getValue(getContext(), "TcDisplayName"));
					propNew.setODataName(prop_Base.getValue(getContext(), "ODataName"));
					propNew.setTcTypeValue(prop_Base.getValue(getContext(), "TcTypeValue"));
					propNew.setisCollection(prop_Base.getValue(getContext(), "isCollection"));
					propNew.setreferenceType(prop_Base.getValue(getContext(), "referenceType"));
					propNew.setODataTypeValue(getODataType(getContext(), prop_Base));
					propNew.setisRuntime(prop_Base.getValue(getContext(), "isRuntime"));
					propNew.setisKeyProp(prop_Base.getValue(getContext(), "isKeyProp"));
					propNew.setautoAdded(prop_Base.getValue(getContext(), "autoAdded"));
					propNew.setisReadOnly(prop_Base.getValue(getContext(), "isReadOnly"));
					propNew.setautoReadOnly(prop_Base.getValue(getContext(), "autoReadOnly"));

					propNew.setisNotEditable(true);
					propNew.setInheritedProperties(true);
					propNew.setProperties_OdataObject(OdataObject.load(getContext(), obj.getId()));
					propNew.commit();
				}
				break;
			}
		}
		allprocessedObjectNames.add(obj.getValue(getContext(), "ODataName"));
		allprocessedObjects.add(obj);
		Core.commit(getContext(), obj);
	}
	
	private void processBaseObject(IMendixObject obj_Base, String baseType, IMendixObject contract) throws Exception
	{
		if(allprocessedObjectNames.contains(baseType))
			return;
		
		Map<String, String> entityBaseMap = new HashMap<String, String>();
		Map<String, IMendixObject> entityObjectMap = new HashMap<String, IMendixObject>();
		processObject(obj_Base, entityBaseMap, entityObjectMap);
		
		String baseOfBase = obj_Base.getValue(getContext(), "BaseType");
		if(baseOfBase != null && !baseOfBase.isEmpty())
			processInheritedProperties(baseOfBase, contract, obj_Base);
	}
	
	private void processObject(IMendixObject obj, Map<String, String> entityBaseMap, Map<String, IMendixObject> entityObjectMap) throws CoreException
	{
		boolean isDataset = false;
		Object displayName = obj.getValue(getContext(), "TcDisplayName");
		String baseType = obj.getValue(getContext(), "BaseType");
		String tcName = obj.getValue(getContext(), "TcName");
		String odataName = obj.getValue(getContext(), "ODataName");
		if((displayName != null && !displayName.toString().isEmpty()))
		{
			List<IMendixObject> propList = Core.retrieveByPath(getContext(), obj, "SchemaGenerator.Properties_OdataObject");
			if(baseType != null && !baseType.isEmpty())
			{
				for(IMendixObject prop : propList)
				{
					if((boolean) prop.getMember(getContext(), "InheritedProperties").getValue(getContext()))
						Core.delete(getContext(), prop);
				}
				entityBaseMap.put(odataName, baseType);
				entityObjectMap.put(odataName, obj);
			}
			return;
		}
		
		List<IMendixObject> subTypeList = Core.retrieveXPathQuery(getContext(), "//SchemaGenerator.SubType" + "[subTypeNames = '" + tcName + "']");
		IMendixObject subType = null;
		if(!subTypeList.isEmpty())
		{
			subType = subTypeList.get(0);
			String subTypeDisplayName = subType.getValue(getContext(), "subTypeDisplayName");
			obj.setValue(getContext(), "TcDisplayName",  subTypeDisplayName);
			obj.setValue(getContext(), "isDataset",  subType.getMember(getContext(), "isDataset").getValue(getContext()));
		}
		
		if(!isDataset && subType != null)
			isDataset = (boolean) subType.getMember(getContext(), "isDataset").getValue(getContext());
		
		if((isDataset || subTypeList.isEmpty()) && tcName.equals("ImanFile"))
		{
			obj.setValue(getContext(), "TcDisplayName", "File");
			obj.setValue(getContext(), "isNotEditable", true);
			if((boolean)obj.getMember(getContext(), "autoAdded").getValue(getContext()))
			{
				obj.setValue(getContext(), "Inheritable", false);
				obj.setValue(getContext(), "exposeObject", false);
			}
		}
		
		List<IMendixObject> propList = Core.retrieveByPath(getContext(), obj, "SchemaGenerator.Properties_OdataObject");			
		
		if(baseType != null && !baseType.isEmpty())
		{
			for(IMendixObject prop : propList)
			{
				if((boolean) prop.getMember(getContext(), "InheritedProperties").getValue(getContext()))
					Core.delete(getContext(), prop);
			}
			entityBaseMap.put(odataName, baseType);
			entityObjectMap.put(odataName, obj);
		}
		else
		{
			allprocessedObjectNames.add(odataName);
			allprocessedObjects.add(obj);
		}
		
		propList = Core.retrieveByPath(getContext(), obj, "SchemaGenerator.Properties_OdataObject");
		
		for(IMendixObject prop : propList)
		{
			String propTcName = prop.getValue(getContext(), "TcName");
			if(propTcName.equals("puid"))
			{
				Core.delete(getContext(), prop);
				continue;
			}
			
			if(!tcName.equals("ImanFile") && (prop.getValue(getContext(), "TcDisplayName") == null || prop.getValue(getContext(), "TcDisplayName").toString().isEmpty()))
			{
				SubType subTypeEntity = SubType.load(getContext(), subType.getId());
				if(!getSubTypeList.contains(subTypeEntity))
					getSubTypeList.add(subTypeEntity);
				
				if(!getObjList.contains(obj))
					getObjList.add(obj);
			}
			
			if(tcName.equals("ImanFile"))
			{
				ImanSubType.setsubTypeNames("ImanFile");
				boolean valuePresent = false;
				for(SubType getSubType : getSubTypeList)
					if(getSubType.getsubTypeNames().equals("ImanFile"))
						valuePresent = true;
				
				if(!valuePresent)
					getSubTypeList.add(ImanSubType);
				
				if(!getObjList.contains(obj))
					getObjList.add(obj);
			}
			
			if(isDataset && (subType != null && (boolean) subType.getMember(getContext(), "isDataset").getValue(getContext())) && propTcName.equals("ref_list"))
				prop.setValue(getContext(), "isNotEditable",  true);
			
			if((isDataset || subTypeList.isEmpty()) && tcName.equals("ImanFile") &&
					( propTcName.equals("original_file_name") ||
							propTcName.equals("file_ext") ||
							propTcName.equals("byte_size") ||
							propTcName.equals("mime_type") ||
							propTcName.equals("last_mod_date") ||
							propTcName.equals("creation_date")
							))
				prop.setValue(getContext(), "isNotEditable",  true);
			
			Core.commit(getContext(), prop);
		}
	}
	
	private void processObjectValuesFromSoa() throws CoreException
	{		
		List<types> typeList = Microflows.executeGetTypeDescriptions(getContext(), getSubTypeList);
		
		for(IMendixObject getObj : getObjList)
		{
			String tcName = getObj.getValue(getContext(), "TcName");
			types subType = null;
			for(types type : typeList)
			{
				if(type.getname().equals(tcName))
				{
					subType = type;
					break;
				}
			}
			List<IMendixObject> propDescList = Core.retrieveByPath(getContext(), subType.getMendixObject(), "SchemaGenerator.propertyDescriptors");
			List<IMendixObject> propList = Core.retrieveByPath(getContext(), getObj, "SchemaGenerator.Properties_OdataObject");
			for(IMendixObject prop : propList)
			{
				String propTcName = prop.getValue(getContext(), "TcName");
				for(IMendixObject propDesc : propDescList)
				{
					if(propDesc.getValue(getContext(), "name").equals(propTcName))
					{
						prop.setValue(getContext(), "TcDisplayName", propDesc.getValue(getContext(), "displayName"));
							Core.commit(getContext(), prop);
						break;
					}
				}
			}
			Core.commit(getContext(), getObj);
		}
	}
	// END EXTRA CODE
}
