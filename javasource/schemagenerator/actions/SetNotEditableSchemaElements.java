// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package schemagenerator.actions;

import java.util.ArrayList;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class SetNotEditableSchemaElements extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject __WorkingSchema;
	private schemagenerator.proxies.ODataSchema WorkingSchema;
	private IMendixObject __DeployedSchema;
	private schemagenerator.proxies.ODataSchema DeployedSchema;

	public SetNotEditableSchemaElements(IContext context, IMendixObject WorkingSchema, IMendixObject DeployedSchema)
	{
		super(context);
		this.__WorkingSchema = WorkingSchema;
		this.__DeployedSchema = DeployedSchema;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.WorkingSchema = this.__WorkingSchema == null ? null : schemagenerator.proxies.ODataSchema.initialize(getContext(), __WorkingSchema);

		this.DeployedSchema = this.__DeployedSchema == null ? null : schemagenerator.proxies.ODataSchema.initialize(getContext(), __DeployedSchema);

		// BEGIN USER CODE
		try 
		{
			List<IMendixObject> contractNSList = Core.retrieveByPath(getContext(), __WorkingSchema, "SchemaGenerator.ContractNameSpaces_ODataSchema");
			List<IMendixObject> odataObjList = new ArrayList<IMendixObject>();
			List<IMendixObject> contractNSListDeployed = Core.retrieveByPath(getContext(), __DeployedSchema, "SchemaGenerator.ContractNameSpaces_ODataSchema");
			List<IMendixObject> odataObjListDeployed = new ArrayList<IMendixObject>();

			List<IMendixObject> objList;
			List<String> contractNSDeployedName = new ArrayList<>();
			for(IMendixObject contractNS : contractNSListDeployed)
			{
				objList = Core.retrieveByPath(getContext(), contractNS, "SchemaGenerator.OdataObject_ContractNameSpaces");
				if(objList != null)
					odataObjListDeployed.addAll(objList);
				contractNSDeployedName.add(contractNS.getValue(getContext(), "ContractNameSpace"));
			}
			
			for(IMendixObject contractNS : contractNSList)
			{
				objList = Core.retrieveByPath(getContext(), contractNS, "SchemaGenerator.OdataObject_ContractNameSpaces");
				if(objList != null)
					odataObjList.addAll(objList);
				
				if(contractNSDeployedName.contains(contractNS.getValue(getContext(), "ContractNameSpace")) || (boolean) contractNS.getValue(getContext(), "InheritedObject"))
				{
					contractNS.setValue(getContext(), "deleteNamespace", false);
					contractNS.setValue(getContext(), "editNamespace", false);
					Core.commit(getContext(), contractNS);
				}
			}
			
			
			for(IMendixObject odataObj : odataObjList)
			{
				String entityNameNS = odataObj.getMember(getContext(), "ODataName").getValue(getContext()).toString();
				String entityNameTemp;
				
				for (IMendixObject iMendixObject : odataObjListDeployed)
				{
					entityNameTemp = iMendixObject.getMember(getContext(), "ODataName").getValue(getContext()).toString();
					
					if(entityNameTemp.equals(entityNameNS))
					{
						odataObj.setValue(getContext(), "isNotEditable", true);
						
						Core.commit(getContext(), odataObj);
						
						List<IMendixObject> propListDeployed = Core.retrieveByPath(getContext(), iMendixObject, "SchemaGenerator.Properties_OdataObject");
						List<IMendixObject> propList = Core.retrieveByPath(getContext(), odataObj, "SchemaGenerator.Properties_OdataObject");
						String propNameTemp;
						for(IMendixObject prop : propList)
						{
							String propName = prop.getMember(getContext(), "ODataName").getValue(getContext()).toString();

							for (IMendixObject propDeployed : propListDeployed)
							{
								propNameTemp = propDeployed.getMember(getContext(), "ODataName").getValue(getContext()).toString();
								
								if(propNameTemp.equals(propName))
								{
									prop.setValue(getContext(), "isNotEditable", true);
									
									Core.commit(getContext(), prop);
									break;
								}
							}
						}
						
						break;
					}
				}				
			}
			
			return null;
		} catch (Exception e) {
			throw e;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "SetNotEditableSchemaElements";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
