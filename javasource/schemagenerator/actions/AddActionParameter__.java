// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package schemagenerator.actions;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.webui.FeedbackHelper;
import schemagenerator.proxies.ActionParams;
import schemagenerator.proxies.ComplexTypeAttribute;
import schemagenerator.proxies.ContractNameSpaces;
import schemagenerator.proxies.OdataActions;
import schemagenerator.proxies.OdataComplexType;
import schemagenerator.proxies.OperationMappingFile;
import schemagenerator.proxies.SelectionTreeNode;
import schemagenerator.proxies.View;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IFeedback;

public class AddActionParameter__ extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __selectionHelper;
	private schemagenerator.proxies.SelectionTreeNodeHelper selectionHelper;

	public AddActionParameter__(IContext context, IMendixObject selectionHelper)
	{
		super(context);
		this.__selectionHelper = selectionHelper;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.selectionHelper = this.__selectionHelper == null ? null : schemagenerator.proxies.SelectionTreeNodeHelper.initialize(getContext(), __selectionHelper);

		// BEGIN USER CODE

        // Validations
        SelectionTreeNode node = selectionHelper.getSelectionTreeNodeHelper_SelectionTreeNode().get(0);
        if(node.getAddAsParameter()){
            FeedbackHelper.addTextMessageFeedback(
                    getContext(),
                    IFeedback.MessageType.INFO,
                    "Already added as Parameter",
                    true
            );
            return null;
        }
        if (TcODataSchemaHelper.areChildrenAddedAsParams(node)) {
            FeedbackHelper.addTextMessageFeedback(
                    getContext(),
                    IFeedback.MessageType.INFO,
                    "Children are already added as Parameters, please delete them first",
                    true
            );
            return null;
        }
        if (TcODataSchemaHelper.areParentsAddedAsParams(getContext(), node)) {
            FeedbackHelper.addTextMessageFeedback(
                    getContext(),
                    IFeedback.MessageType.INFO,
                    "Parent already added as Parameter, please delete it first",
                    true
            );
            return null;
        }
        
        String paramNodeMapName = node.getName();
        if (paramNodeMapName.contains("SampleKeyString") || paramNodeMapName.contains("SampleKeyInt") || paramNodeMapName.contains("SampleKeyIModelObject") ) {
        	 FeedbackHelper.addTextMessageFeedback(
                     getContext(),
                     IFeedback.MessageType.INFO,
                     "Please select parent node to add Map as parameter",
                     true
             );
             return null;
        }

        View view = selectionHelper.getSelectionTreeNodeHelper_View();
        IMendixObject opMappingFile = Core.retrieveByPath(
                getContext(),
                view.getMendixObject(),
                OperationMappingFile.MemberNames.OperationMappingFile_View_Request.toString()
        ).get(0);
        IMendixObject odataActionMxObj = Core.retrieveByPath(
                getContext(),
                opMappingFile,
                OperationMappingFile.MemberNames.OperationMappingFile_OdataActions.toString()
        ).get(0);
        OdataActions odataAction = OdataActions.initialize(getContext(), odataActionMxObj);

        // Check if type is Array type (Type ending with [] is Array type)
        String paramNodeName = node.getName();
        boolean paramIsArray = false;
        if (paramNodeName.endsWith("[]")) {
            paramNodeName = paramNodeName.substring(0, paramNodeName.length() - "[]".length());
            paramIsArray = true;
        }

        // Split Node at ':' to get the name of key and value of key (e.g. wso: IModelObject)
        String[] paramNodeNameParts = paramNodeName.split("[:]");

        // Create the new ActionParameter
        ActionParams actionParameter = new ActionParams(getContext());
        actionParameter.setName(paramNodeNameParts[0]);
        actionParameter.setInternalName(paramNodeNameParts[0]);
        actionParameter.setDisplayName(paramNodeNameParts[0]);
        actionParameter.setActionParams_OdataActions(odataAction);
        actionParameter.setIsRequired(true);
        actionParameter.setIsCollection(paramIsArray);
        actionParameter.setActionParams_SelectionTreeNode(node);
        node.setMendixGUID(actionParameter.getMendixObject().getId().toLong());
        node.setAddAsParameter(true);
        node.commit();
        if (paramNodeNameParts.length >= 2) {
            if (paramNodeNameParts[1].trim().equals("IModelObject")) {
            	actionParameter.setParameterDataType("Select Type");
            	actionParameter.setOriginalParameterDataType("Reference");
            } else {
            	String dataType = paramNodeNameParts[1].trim();
                actionParameter.setParameterDataType(  getContext(), "Edm." + getDataType(dataType));
                actionParameter.setOriginalParameterDataType( getContext(), "Edm." + dataType);
            }
        }
        else {
            ContractNameSpaces cns = odataAction.getOdataActions_ContractNameSpaces();
            OdataComplexType complexType = TcODataSchemaHelper.mapChildren(getContext(), node, cns, actionParameter);
            if(complexType == null)
            {
            	node.setAddAsParameter(false);
            	node.commit();
            	Core.delete(getContext(), actionParameter.getMendixObject());
            	FeedbackHelper.addRefreshObjectFeedback(getContext(), odataAction.getMendixObject().getId());
                FeedbackHelper.addRefreshClass(getContext(), OdataActions.getType());
            	return null;
            }
            complexType.setOdataComplexType_ActionParams(getContext(),actionParameter);
            actionParameter.setParameterDataType(getContext(), complexType.getComplexTypeName());
        }
        actionParameter.commit();
        FeedbackHelper.addRefreshObjectFeedback(getContext(), odataAction.getMendixObject().getId());
        FeedbackHelper.addRefreshClass(getContext(), OdataActions.getType());
        //FeedbackHelper.addCloseCallerFeedback(getContext());
        return actionParameter.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "AddActionParameter__";
	}

	// BEGIN EXTRA CODE
    boolean areChildrenMapped(SelectionTreeNode node) throws CoreException {
        List<SelectionTreeNode> children = node.getSelectionTreeNode_Children();
        for (SelectionTreeNode child : children) {
            String name = child.getName();
            String[] nameParts = name.split("[:]");
            if (nameParts.length >= 2 && nameParts[1].trim().equals("IModelObject") && child.getMappedType() == null) {
                return false;
            }
            else {
                if (!areChildrenMapped(child)) {
                    return false;
                }
            }
        }       
        return true;
    }
    
    private String getDataType(String dataType)
    {
    	switch (dataType) {
		case "int":
			return "Int64";
		case "bool":
			return "Boolean";
		case "double":
			return "Double";
		case "float":
			return "Double";
		case "Date" :
			return "Date";
		default:
			return "String";
		}
    }
	// END EXTRA CODE
}
