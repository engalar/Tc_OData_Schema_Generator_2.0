// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package schemagenerator.actions;

import java.util.List;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import org.apache.commons.io.IOUtils;
import schemagenerator.proxies.ContractNameSpaces;
import schemagenerator.proxies.ODataSchema;
import schemagenerator.proxies.OdataActions;
import schemagenerator.proxies.OdataObject;
import schemagenerator.proxies.OperationMappingFile;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.thirdparty.org.json.JSONArray;
import com.mendix.thirdparty.org.json.JSONObject;

public class AddOperationMapping extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __odataSchema;
	private schemagenerator.proxies.ODataSchema odataSchema;
	private IMendixObject __schemaDocument;
	private schemagenerator.proxies.OdataSchemaDocument schemaDocument;

	public AddOperationMapping(IContext context, IMendixObject odataSchema, IMendixObject schemaDocument)
	{
		super(context);
		this.__odataSchema = odataSchema;
		this.__schemaDocument = schemaDocument;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.odataSchema = this.__odataSchema == null ? null : schemagenerator.proxies.ODataSchema.initialize(getContext(), __odataSchema);

		this.schemaDocument = this.__schemaDocument == null ? null : schemagenerator.proxies.OdataSchemaDocument.initialize(getContext(), __schemaDocument);

		// BEGIN USER CODE
		String schemaDocString = IOUtils.toString(Core.getFileDocumentContent(getContext(), __schemaDocument));
		JSONObject schemaDocJson = new JSONObject(schemaDocString);
		List<IMendixObject> cns = Core.retrieveByPath(getContext(), __odataSchema, ContractNameSpaces.MemberNames.ContractNameSpaces_ODataSchema.toString());
		JSONArray dataservices = schemaDocJson.getJSONArray("dataServices");
		for (IMendixObject contractNamespace : cns) {
			JSONObject jsonCns = null;
			for (int i = 0; i < dataservices.length(); i++) {
				if (dataservices.getJSONObject(i).getString("schemaNameSpace").equals(contractNamespace.getMember(getContext(), ContractNameSpaces.MemberNames.ContractNameSpace.toString()).getValue(getContext()).toString())) {
					jsonCns = dataservices.getJSONObject(i);
					break;
				}
			}
			List<IMendixObject> unboundActions = Core.retrieveByPath(getContext(), contractNamespace, OdataActions.MemberNames.OdataActions_ContractNameSpaces.toString());
			JSONArray unboundActionInfo = jsonCns.getJSONArray("actionInfo");
			for (IMendixObject action : unboundActions) {
				OperationMappingFile operatioMappingFile = OperationMappingFile.initialize(getContext(), Core.retrieveByPath(getContext(), action, OdataActions.MemberNames.OperationMappingFile_OdataActions.toString()).get(0));
				String operatioMappingFileString = operatioMappingFile.getJSONModified();
				JSONObject operatioMappingFileJSON = new JSONObject(operatioMappingFileString);
				for (int i = 0; i < unboundActionInfo.length(); i++) {
					if (unboundActionInfo.getJSONObject(i).getString("name").equals(action.getMember(getContext(), OdataActions.MemberNames.Name.toString()).getValue(getContext()).toString())) {
						unboundActionInfo.getJSONObject(i).put("operationMapping", operatioMappingFileJSON);
						break;
					}
				}
			}
			List<IMendixObject> odataObjects = Core.retrieveByPath(getContext(), contractNamespace, OdataObject.MemberNames.OdataObject_ContractNameSpaces.toString());
			for (IMendixObject odataObject : odataObjects) {
				List<IMendixObject> boundActions = Core.retrieveByPath(getContext(), odataObject, OdataActions.MemberNames.OdataActions_OdataObject.toString());
				JSONArray entityInfo = jsonCns.getJSONArray("entityInfo");
				JSONObject odataObjectJSON = null;
				for (int i = 0; i < entityInfo.length(); i++) {
					if (entityInfo.getJSONObject(i).getString("oDataEntityName").equals(odataObject.getMember(getContext(), OdataObject.MemberNames.ODataName.toString()).getValue(getContext()).toString())) {
						odataObjectJSON = entityInfo.getJSONObject(i);
						break;
					}
				}
				JSONArray boundActionInfo = odataObjectJSON.getJSONArray("actionInfo");
				for (IMendixObject action : boundActions) {
					OperationMappingFile operatioMappingFile = OperationMappingFile.initialize(getContext(), Core.retrieveByPath(getContext(), action, OdataActions.MemberNames.OperationMappingFile_OdataActions.toString()).get(0));
					String operatioMappingFileString = operatioMappingFile.getJSONModified();
					JSONObject operatioMappingFileJSON = new JSONObject(operatioMappingFileString);
					for (int i = 0; i < boundActionInfo.length(); i++) {
						if (boundActionInfo.getJSONObject(i).getString("name").equals(action.getMember(getContext(), OdataActions.MemberNames.Name.toString()).getValue(getContext()).toString())) {
							boundActionInfo.getJSONObject(i).put("operationMapping", operatioMappingFileJSON);
							break;
						}
					}
				}
			}
			JSONArray enumInfo = jsonCns.getJSONArray("enumInfo");
			for (int i = 0; i < enumInfo.length(); i++) {
				JSONObject enumObj = enumInfo.getJSONObject(i);
				JSONArray members = enumObj.getJSONArray("members");
				for (int j = 0; j < members.length(); j++) {
					members.getJSONObject(j).put("value", Integer.toString(j));
				}
			}
		}
		String modifiedJson = schemaDocJson.toString();
		Core.storeFileDocumentContent(getContext(), __schemaDocument, IOUtils.toInputStream(modifiedJson));
		return __schemaDocument;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "AddOperationMapping";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
