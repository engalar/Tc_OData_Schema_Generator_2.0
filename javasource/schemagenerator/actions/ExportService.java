// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package schemagenerator.actions;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.thirdparty.org.json.JSONArray;
import com.mendix.thirdparty.org.json.JSONObject;
import com.mendix.webui.CustomJavaAction;
import org.apache.commons.io.IOUtils;
import schemagenerator.proxies.OdataSchemaDocument;
import schemagenerator.proxies.constants.Constants;
import schemagenerator.proxies.microflows.Microflows;
import system.proxies.FileDocument;

public class ExportService extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __ODataSchemaDocument;
	private schemagenerator.proxies.OdataSchemaDocument ODataSchemaDocument;
	private java.lang.Boolean deployed;

	public ExportService(IContext context, IMendixObject ODataSchemaDocument, java.lang.Boolean deployed)
	{
		super(context);
		this.__ODataSchemaDocument = ODataSchemaDocument;
		this.deployed = deployed;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.ODataSchemaDocument = this.__ODataSchemaDocument == null ? null : schemagenerator.proxies.OdataSchemaDocument.initialize(getContext(), __ODataSchemaDocument);

		// BEGIN USER CODE
		String tmpFolderPath = Core.getConfiguration().getTempPath().getPath();
		
		String SchemaName = ODataSchemaDocument.getName();
		String tmpFileName = tmpFolderPath + File.separator + SchemaName + UUID.randomUUID().toString() + ".json";
		FileOutputStream fos = new FileOutputStream(tmpFileName);
        ZipOutputStream zos = new ZipOutputStream(fos);
        
		addFilesInZip(zos, ODataSchemaDocument, deployed);
        
		zos.close();
		fos.close();
		
        FileDocument zipDoc = new OdataSchemaDocument(getContext());
		zipDoc.setName(SchemaName + ".zip");
		zipDoc.setDeleteAfterDownload(true);
		InputStream inputStream = new FileInputStream(tmpFileName);
		Core.storeFileDocumentContent(getContext(), zipDoc.getMendixObject(), inputStream);
		inputStream.close();
		Files.deleteIfExists(Path.of(tmpFileName));
		return zipDoc.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExportService";
	}

	// BEGIN EXTRA CODE

	private void addFilesInZip(ZipOutputStream zos, OdataSchemaDocument schemaDocument, boolean deployed) throws Exception
	{
		String SchemaName = schemaDocument.getName();
		String SchemaVersion = schemaDocument.getmajorVersion();
		
		String serviceFolder = SchemaName + "/"; /* any name ending with '/' is treated as a directory */
		ZipEntry e1 = new ZipEntry(serviceFolder);
        zos.putNextEntry(e1);
		String serviceFolderPath = serviceFolder + SchemaVersion + "/";
		ZipEntry e2 = new ZipEntry(serviceFolderPath);
        zos.putNextEntry(e2);

        String jsonString = null;
        if(deployed)
        	jsonString = Microflows.getDeployedServicesContent(getContext(), schemaDocument);
        else
        	jsonString = TcODataSchemaHelper.extractSchemaJsonString(getContext(), schemaDocument);
        
		JSONObject inputString = new JSONObject(jsonString);
		JSONArray referencesArray = inputString.getJSONArray("externalReferences");
		for (int refIndex = 0; refIndex < referencesArray.length(); ++refIndex)
		{
			String uriString = referencesArray.getJSONObject(refIndex).getString("uri");
			if (uriString.equals(CheckAndAddVocabularySchemas.CAPABLITIES_URI)) {
				continue;
			}
			String mappingFileName = uriString.split("http://localhost/")[1];

			//Check if TcMapping.json file document exists locally in db otherwise download
			String[] names = mappingFileName.split(Constants.getAppendInFileName());
			
			OdataSchemaDocument odataSchemaDocument = Microflows.retriveOdataSchemaDocument(getContext(), names[0], names[1]);
			if (odataSchemaDocument == null) 
			{
				odataSchemaDocument = new OdataSchemaDocument(getContext());
				odataSchemaDocument.setName(names[0]);
				odataSchemaDocument.setmajorVersion(names[1]);
				String deployedSchemaString = Microflows.getDeployedServicesContent(getContext(), odataSchemaDocument);
				Core.storeFileDocumentContent(getContext(), odataSchemaDocument.getMendixObject(), names[0], IOUtils.toInputStream(deployedSchemaString));
			}
			
			addFilesInZip(zos, odataSchemaDocument, deployed);
			Core.delete(getContext(), odataSchemaDocument.getMendixObject());
		}

		//for ZipEntry we need to keep only relative file path, so we used substring on absolute path
        ZipEntry entryMapping = new ZipEntry(serviceFolderPath + "TcMapping.json");
        zos.putNextEntry(entryMapping);

        byte[] bufferMapping = jsonString.getBytes();
        zos.write(bufferMapping, 0, bufferMapping.length);
        zos.closeEntry();
        
	}
	// END EXTRA CODE
}
