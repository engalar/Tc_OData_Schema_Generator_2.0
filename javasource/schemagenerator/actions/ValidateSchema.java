// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package schemagenerator.actions;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import tcconnector.foundation.TcConnection;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.thirdparty.org.json.JSONArray;
import com.mendix.thirdparty.org.json.JSONObject;

public class ValidateSchema extends CustomJavaAction<java.lang.Void>
{
	private java.lang.String mappingFileContent;

	public ValidateSchema(IContext context, java.lang.String mappingFileContent)
	{
		super(context);
		this.mappingFileContent = mappingFileContent;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {
			List<IMendixObject> subtypesList = Core.retrieveXPathQuery(getContext(), "//SchemaGenerator.SubType");
			List<String> subTypesNames = new ArrayList<String>();
			
			for(IMendixObject subType: subtypesList)
				subTypesNames.add(subType.getMember(getContext(), "subTypeNames").getValue(getContext()).toString());
			
			JSONArray dataServices = new JSONObject(mappingFileContent).getJSONArray("dataServices");
			
			List<String> subTypesNamesMapping = new ArrayList<String>();
			for(int i = 0; i < dataServices.length(); i++)
			{
				JSONArray entityInfo = dataServices.getJSONObject(i).getJSONArray("entityInfo");
				for(int j = 0; j < entityInfo.length(); j++)
				{
					String teamcenterTypeName = entityInfo.getJSONObject(j).getString("teamcenterTypeName");
					if(!subTypesNames.contains(teamcenterTypeName) && !teamcenterTypeName.equals("ImanFile"))
						throw new Exception("The teamcenter object " + teamcenterTypeName + " does not exists");
					
					subTypesNamesMapping.add(teamcenterTypeName);
				}
				
				JSONObject input = new JSONObject();
				input.put("typeNames", subTypesNamesMapping);

				JSONObject response = TcConnection.callTeamcenterService( getContext(), "Core-2011-06-Session/getTypeDescriptions", input, null, "");
				
				JSONArray props = response.getJSONArray("types");
				
				Map<String, List<String>> typePropsMap = new HashMap<String, List<String>>();
				for(int k = 0; k < props.length(); k++)
				{
					List<String> propertyList = new ArrayList<String>();
					JSONArray propertyDescriptors = props.getJSONObject(k).getJSONArray("propertyDescriptors");
					
					for(int index=0; index < propertyDescriptors.length(); index++)
						propertyList.add(propertyDescriptors.getJSONObject(index).getString("name"));
					
					typePropsMap.put(props.getJSONObject(k).getString("name"), propertyList);
				}
				
				for(int j = 0; j < entityInfo.length(); j++)
				{
					String teamcenterTypeName = entityInfo.getJSONObject(j).getString("teamcenterTypeName");
					List<String> propList = typePropsMap.get(teamcenterTypeName);
					JSONArray attributeInfo = entityInfo.getJSONObject(j).getJSONArray("attributeInfo");
					for(int k = 0; k < attributeInfo.length(); k++)
					{
						String teamcenterAttrName = attributeInfo.getJSONObject(k).getString("teamcenterAttrName");
						if(!teamcenterAttrName.equals("puid") && !propList.contains(teamcenterAttrName))
							throw new Exception("The property " + teamcenterAttrName + " for the teamcenter object " + teamcenterTypeName + " does not exists");
					}
				}
			}
		} catch (Exception e) {
			throw e;
		}
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ValidateSchema";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
