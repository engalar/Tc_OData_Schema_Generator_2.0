// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package schemagenerator.actions;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.webui.FeedbackHelper;
import schemagenerator.proxies.ActionParams;
import schemagenerator.proxies.ComplexTypeAttribute;
import schemagenerator.proxies.ReturnType;
import schemagenerator.proxies.SelectionTreeNode;
import schemagenerator.proxies.SelectionTreeNodeHelper;
import schemagenerator.proxies.View;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class TreeSelectForMappingJsonAction extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject __selectionHelper;
	private schemagenerator.proxies.SelectionTreeNodeHelper selectionHelper;

	public TreeSelectForMappingJsonAction(IContext context, IMendixObject selectionHelper)
	{
		super(context);
		this.__selectionHelper = selectionHelper;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.selectionHelper = this.__selectionHelper == null ? null : schemagenerator.proxies.SelectionTreeNodeHelper.initialize(getContext(), __selectionHelper);

		// BEGIN USER CODE
		View view = selectionHelper.getSelectionTreeNodeHelper_View();
		SelectionTreeNode node = selectionHelper.getSelectionTreeNodeHelper_SelectionTreeNode().get(0);
		String typeToSetFQN = node.getOdataFullyQuallifiedName();

		//Get the Object whose type is being set
		Long uuid = view.getViewForObjectUUID();
		IMendixObject originalNodeMxObj = Core.retrieveId(getContext(), Core.createMendixIdentifier(uuid));

		//Set DataType according to object's type
		if (originalNodeMxObj.getType().equalsIgnoreCase(ActionParams.getType())) {
			ActionParams originalNode = ActionParams.initialize(getContext(), originalNodeMxObj);
			originalNode.setParameterDataType(typeToSetFQN);
			originalNode.commit();
		}
		else if (originalNodeMxObj.getType().equalsIgnoreCase(ComplexTypeAttribute.getType())) {
			ComplexTypeAttribute originalNode = ComplexTypeAttribute.initialize(getContext(), originalNodeMxObj);
			originalNode.setAttributeDataType("Reference");
			originalNode.setReferenceType(typeToSetFQN);
			originalNode.commit();
		}
		else if (originalNodeMxObj.getType().equalsIgnoreCase(ReturnType.getType())) {
			ReturnType originalNode = ReturnType.initialize(getContext(), originalNodeMxObj);
			originalNode.setBaseType(typeToSetFQN);
			originalNode.commit();
		}

		//Retrieve and delete the tree nodes
		Core.deleteAsync(getContext(), Core.retrieveByPath(getContext(), view.getMendixObject(), SelectionTreeNode.MemberNames.SelectionTreeNode_View.toString()), false);

		//Close page and refresh the changed object
		FeedbackHelper.addCloseCallerFeedback(getContext());
		FeedbackHelper.addRefreshObjectFeedback(getContext(), originalNodeMxObj.getId());

		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "TreeSelectForMappingJsonAction";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
